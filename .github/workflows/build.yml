---
name: Build

# Controls when the workflow will run
'on':
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "47 3 * * 0"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Install test dependencies.
        run: python3 -m pip install --user ansible ansible-lint

      - name: Lint code with yamllint.
        run: yamllint .

      - name: Lint code with ansible-lint.
        run: ansible-lint

  # Build the images and push them to Docker repository.
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAMESPACE: coglinev3
      IMAGE_NAME: python
    strategy:
      matrix:
        include:
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.19"
            CONTAINER_NAMESPACE: coglinev3
            IMAGE_ALTERNATE_TAG: latest
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.18"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.17"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.16"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.15"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.14"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.13"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: alpine
            CONTAINER_DISTRO_VERSION: "3.12"
            CONTAINER_NAMESPACE: coglinev3
          - CONTAINER_DISTRO: almalinux
            CONTAINER_DISTRO_VERSION: 8
          - CONTAINER_DISTRO: almalinux
            CONTAINER_DISTRO_VERSION: 9
          - CONTAINER_DISTRO: amazonlinux
            CONTAINER_DISTRO_VERSION: 2023
          - CONTAINER_DISTRO: centos
            CONTAINER_DISTRO_VERSION: 7
          - CONTAINER_DISTRO: fedora
            CONTAINER_DISTRO_VERSION: 34
          - CONTAINER_DISTRO: fedora
            CONTAINER_DISTRO_VERSION: 35
          - CONTAINER_DISTRO: fedora
            CONTAINER_DISTRO_VERSION: 36
          - CONTAINER_DISTRO: fedora
            CONTAINER_DISTRO_VERSION: 37
          - CONTAINER_DISTRO: fedora
            CONTAINER_DISTRO_VERSION: 38
          - CONTAINER_DISTRO: debian
            CONTAINER_DISTRO_VERSION: 12
            IMAGE_ALTERNATE_TAG: debian-bookworm
          - CONTAINER_DISTRO: debian
            CONTAINER_DISTRO_VERSION: 11
            IMAGE_ALTERNATE_TAG: debian-bullseye
          - CONTAINER_DISTRO: debian
            CONTAINER_DISTRO_VERSION: 10
            IMAGE_ALTERNATE_TAG: debian-buster
          - CONTAINER_DISTRO: ubuntu
            CONTAINER_DISTRO_VERSION: "22.04"
            IMAGE_ALTERNATE_TAG: ubuntu-jammy
          - CONTAINER_DISTRO: ubuntu
            CONTAINER_DISTRO_VERSION: "20.04"
            IMAGE_ALTERNATE_TAG: ubuntu-focal
          - CONTAINER_DISTRO: ubuntu
            CONTAINER_DISTRO_VERSION: "18.04"
            IMAGE_ALTERNATE_TAG: ubuntu-bionic

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "ANSIBLE_PYTHON_INTERPRETER=${pythonLocation}/bin/python3" >> $GITHUB_ENV
          echo "CONTAINER_DISTRO=${{ matrix.CONTAINER_DISTRO }}" >> $GITHUB_ENV
          echo "CONTAINER_DISTRO_VERSION=${{ matrix.CONTAINER_DISTRO_VERSION }}" >> $GITHUB_ENV
          echo "CONTAINER_NAMESPACE=${{ matrix.CONTAINER_NAMESPACE }}" >> $GITHUB_ENV
          echo "IMAGE_ALTERNATE_TAG=${{ matrix.IMAGE_ALTERNATE_TAG }}" >> $GITHUB_ENV

      - name: Install Ansible
        run: python3 -m pip install --upgrade --user urllib3 ansible ansible-lint docker

      - name: Create Ansible roles directory
        run: mkdir -p ~/.ansible/roles

      - name: Configure Ansible
        run: cp .github/ansible.cfg ~/.ansible.cfg

      - name: Set up Ansible inventory file
        run: cp .github/hosts ~/.ansible/hosts

      - name: Show Ansible version
        run: ansible --version

      - name: Install required Ansible Role(s)
        run: ansible-galaxy install -r requirements.yml -p ~/.ansible/roles

      - name: Build Docker image
        run: ansible-playbook container-python.yml
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

      - name: Run the built image
        run: >
          echo Use docker image
          ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}-${CONTAINER_DISTRO_VERSION}
          && docker run -d --rm --name check_python
          ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}-${CONTAINER_DISTRO_VERSION}
          tail -f /dev/null

      - name: Show container os-release
        run: docker exec check_python env TERM=xterm cat /etc/os-release

      - name: Show container python version
        run: >
          docker exec check_python env TERM=xterm /bin/sh -c "
          /usr/libexec/platform-python --version  2>&1 | grep -v platform-python
          || python3 --version 2> /dev/null
          || python --version 2>&1
          || echo python not available"

      - name: Stop the container
        run: docker stop check_python

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: github.ref == 'refs/heads/master'

      - name: Push docker image
        run: bash scripts/docker_push
        if: github.ref == 'refs/heads/master'

  # Update Docker Hub description
  dockerHubDescription:
    runs-on: ubuntu-latest
    needs:
      - lint
      - build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: coglinev3/python
