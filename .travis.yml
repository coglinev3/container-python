---
dist: bionic
addons:
  apt:
    packages:
      - docker-ce
      - libssl-dev
      - libffi-dev
      - python3
      - python3-pip
      - python3-setuptools
      - python3-software-properties
      - python3-wheel

language: minimal

services:
  - docker

env:
  global:
    - IMAGE_NAMESPACE: coglinev3
    - IMAGE_NAME: python
  matrix:
    - CONTAINER_DISTRO: alpine
      CONTAINER_DISTRO_VERSION: 3.11
      IMAGE_ALTERNATE_TAG: latest
    - CONTAINER_DISTRO: alpine
      CONTAINER_DISTRO_VERSION: 3.10
    - CONTAINER_DISTRO: alpine
      CONTAINER_DISTRO_VERSION: 3.9
    - CONTAINER_DISTRO: centos
      CONTAINER_DISTRO_VERSION: 6
    - CONTAINER_DISTRO: centos
      CONTAINER_DISTRO_VERSION: 7
    - CONTAINER_DISTRO: centos
      CONTAINER_DISTRO_VERSION: 8
    - CONTAINER_DISTRO: fedora
      CONTAINER_DISTRO_VERSION: 32
    - CONTAINER_DISTRO: fedora
      CONTAINER_DISTRO_VERSION: 31
    - CONTAINER_DISTRO: fedora
      CONTAINER_DISTRO_VERSION: 30
    - CONTAINER_DISTRO: fedora
      CONTAINER_DISTRO_VERSION: 29
    - CONTAINER_DISTRO: debian
      CONTAINER_DISTRO_VERSION: 10
      IMAGE_ALTERNATE_TAG: debian-buster
    - CONTAINER_DISTRO: debian
      CONTAINER_DISTRO_VERSION: 9
      IMAGE_ALTERNATE_TAG: debian-stretch
    - CONTAINER_DISTRO: debian
      CONTAINER_DISTRO_VERSION: 8
      IMAGE_ALTERNATE_TAG: debian-jessie
    - CONTAINER_DISTRO: ubuntu
      CONTAINER_DISTRO_VERSION: 20.04
      IMAGE_ALTERNATE_TAG: ubuntu-focal
    - CONTAINER_DISTRO: ubuntu
      CONTAINER_DISTRO_VERSION: 19.10
      IMAGE_ALTERNATE_TAG: ubuntu-eoan
    - CONTAINER_DISTRO: ubuntu
      CONTAINER_DISTRO_VERSION: 18.04
      IMAGE_ALTERNATE_TAG: ubuntu-bionic
    - CONTAINER_DISTRO: ubuntu
      CONTAINER_DISTRO_VERSION: 16.04
      IMAGE_ALTERNATE_TAG: ubuntu-xenial

install:
  # Install Ansible and Python Docker Module
  - pip3 install ansible docker

before_script:
  # Configure Ansible
  - cp .travis/ansible.cfg ~/.ansible.cfg
  - mkdir -p ~/.ansible && cp .travis/hosts ~/.ansible
  # Show Ansible version
  - ansible --version
  # Create roles directory
  - mkdir -p ~/.ansible/roles
  # Install required Ansible Role(s)
  - ansible-galaxy install -r requirements.yml -p ~/.ansible/roles

script:
  # Build image with Ansible
  - ansible-playbook container-python.yml

after_success:
  # Start a container from the new created image
  - >
    cid=$(docker run -d --rm --name check_python
    ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}-${CONTAINER_DISTRO_VERSION}
    tail -f /dev/null)
  # show container os-release
  - docker exec ${cid} env TERM=xterm cat /etc/os-release
  # show container python version
  - >
    docker exec ${cid} env TERM=xterm /bin/sh -c "
    /usr/libexec/platform-python --version
    || python3 --version
    || python --version
    || echo python not available"
  # Stop the container
  - docker stop ${cid}

deploy:
  provider: script
  script: bash scripts/docker_push
  cleanup: false
  on:
    branch: master
